/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(uint64,uint64,uint64,address)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "setConditionMet()bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "optInToAsset(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "releaseFunds(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteEscrow()void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "assetId": {
          "type": "uint64",
          "key": "assetId"
        },
        "quantity": {
          "type": "uint64",
          "key": "quantity"
        },
        "paymentAmount": {
          "type": "uint64",
          "key": "paymentAmount"
        },
        "worker": {
          "type": "bytes",
          "key": "worker"
        },
        "conditionMet": {
          "type": "bytes",
          "key": "conditionMet"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 3
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "EscrowService",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "Initialize the escrow contract",
        "args": [
          {
            "name": "assetId",
            "type": "uint64",
            "desc": "The asset to be held in escrow"
          },
          {
            "name": "quantity",
            "type": "uint64",
            "desc": "The quantity of the asset to transfer"
          },
          {
            "name": "paymentAmount",
            "type": "uint64",
            "desc": "The amount the boss has to pay"
          },
          {
            "name": "worker",
            "type": "address",
            "desc": "The worker who will receive the asset if the condition is met"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setConditionMet",
        "desc": "Sets the condition to true, allowing funds release, and sends a message to the worker\nThis can be called by the boss upon confirmation that work is done or the asset has been delivered.\n\n\nThe address of the worker to confirm identity and send a message",
        "args": [],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "optInToAsset",
        "desc": "Opt the contract address into the asset being held in escrow.\nThis allows the contract to hold the asset securely.",
        "args": [
          {
            "name": "mbrTxn",
            "type": "pay",
            "desc": "The payment transaction that covers the Minimum Balance Requirement (MBR) for opting into the asset."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "releaseFunds",
        "desc": "Transfer funds from escrow to worker if the condition is met",
        "args": [
          {
            "name": "workerPaymentTxn",
            "type": "pay",
            "desc": "The payment transaction from the boss to the contract"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteEscrow",
        "desc": "Method to cancel the escrow and delete the application\nReturns any remaining funds or assets to the boss",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the EscrowService smart contract.
 */
export type EscrowService = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(uint64,uint64,uint64,address)void' | 'createApplication', {
      argsObj: {
        /**
         * The asset to be held in escrow
         */
        assetId: bigint | number
        /**
         * The quantity of the asset to transfer
         */
        quantity: bigint | number
        /**
         * The amount the boss has to pay
         */
        paymentAmount: bigint | number
        /**
         * The worker who will receive the asset if the condition is met
         */
        worker: string
      }
      argsTuple: [assetId: bigint | number, quantity: bigint | number, paymentAmount: bigint | number, worker: string]
      returns: void
    }>
    & Record<'setConditionMet()bool' | 'setConditionMet', {
      argsObj: {
      }
      argsTuple: []
      returns: boolean
    }>
    & Record<'optInToAsset(pay)void' | 'optInToAsset', {
      argsObj: {
        /**
         * The payment transaction that covers the Minimum Balance Requirement (MBR) for opting into the asset.
         */
        mbrTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [mbrTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'releaseFunds(pay)void' | 'releaseFunds', {
      argsObj: {
        /**
         * The payment transaction from the boss to the contract
         */
        workerPaymentTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [workerPaymentTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'deleteEscrow()void' | 'deleteEscrow', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'assetId'?: IntegerState
      'quantity'?: IntegerState
      'paymentAmount'?: IntegerState
      'worker'?: BinaryState
      'conditionMet'?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type EscrowServiceSig = keyof EscrowService['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends EscrowServiceSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the EscrowService smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends EscrowServiceSig> = EscrowService['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the EscrowService smart contract to the method's return type
 */
export type MethodReturn<TSignature extends EscrowServiceSig> = EscrowService['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type EscrowServiceCreateCalls = (typeof EscrowServiceCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type EscrowServiceCreateCallParams =
  | (TypedCallParams<'createApplication(uint64,uint64,uint64,address)void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type EscrowServiceDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: EscrowServiceCreateCalls) => EscrowServiceCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class EscrowServiceCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the EscrowService smart contract using the createApplication(uint64,uint64,uint64,address)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(uint64,uint64,uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(uint64,uint64,uint64,address)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.assetId, args.quantity, args.paymentAmount, args.worker],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the setConditionMet()bool ABI method
   *
   * Sets the condition to true, allowing funds release, and sends a message to the worker
This can be called by the boss upon confirmation that work is done or the asset has been delivered.


The address of the worker to confirm identity and send a message
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setConditionMet(args: MethodArgs<'setConditionMet()bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setConditionMet()bool' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the optInToAsset(pay)void ABI method
   *
   * Opt the contract address into the asset being held in escrow.
This allows the contract to hold the asset securely.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static optInToAsset(args: MethodArgs<'optInToAsset(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'optInToAsset(pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.mbrTxn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the releaseFunds(pay)void ABI method
   *
   * Transfer funds from escrow to worker if the condition is met
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static releaseFunds(args: MethodArgs<'releaseFunds(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'releaseFunds(pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.workerPaymentTxn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the deleteEscrow()void ABI method
   *
   * Method to cancel the escrow and delete the application
Returns any remaining funds or assets to the boss
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deleteEscrow(args: MethodArgs<'deleteEscrow()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'deleteEscrow()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the EscrowService smart contract
 */
export class EscrowServiceClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `EscrowServiceClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof EscrowService['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the EscrowService smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: EscrowServiceDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(EscrowServiceCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the EscrowService smart contract using the createApplication(uint64,uint64,uint64,address)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(uint64,uint64,uint64,address)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication(uint64,uint64,uint64,address)void'>, AppCreateCallTransactionResult>(await $this.appClient.create(EscrowServiceCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the EscrowService smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the setConditionMet()bool ABI method.
   *
   * Sets the condition to true, allowing funds release, and sends a message to the worker
This can be called by the boss upon confirmation that work is done or the asset has been delivered.


The address of the worker to confirm identity and send a message
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setConditionMet(args: MethodArgs<'setConditionMet()bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(EscrowServiceCallFactory.setConditionMet(args, params))
  }

  /**
   * Calls the optInToAsset(pay)void ABI method.
   *
   * Opt the contract address into the asset being held in escrow.
This allows the contract to hold the asset securely.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public optInToAsset(args: MethodArgs<'optInToAsset(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(EscrowServiceCallFactory.optInToAsset(args, params))
  }

  /**
   * Calls the releaseFunds(pay)void ABI method.
   *
   * Transfer funds from escrow to worker if the condition is met
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public releaseFunds(args: MethodArgs<'releaseFunds(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(EscrowServiceCallFactory.releaseFunds(args, params))
  }

  /**
   * Calls the deleteEscrow()void ABI method.
   *
   * Method to cancel the escrow and delete the application
Returns any remaining funds or assets to the boss
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public deleteEscrow(args: MethodArgs<'deleteEscrow()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(EscrowServiceCallFactory.deleteEscrow(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<EscrowService['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get assetId() {
        return EscrowServiceClient.getIntegerState(state, 'assetId')
      },
      get quantity() {
        return EscrowServiceClient.getIntegerState(state, 'quantity')
      },
      get paymentAmount() {
        return EscrowServiceClient.getIntegerState(state, 'paymentAmount')
      },
      get worker() {
        return EscrowServiceClient.getBinaryState(state, 'worker')
      },
      get conditionMet() {
        return EscrowServiceClient.getBinaryState(state, 'conditionMet')
      },
    }
  }

  public compose(): EscrowServiceComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      setConditionMet(args: MethodArgs<'setConditionMet()bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setConditionMet(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      optInToAsset(args: MethodArgs<'optInToAsset(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.optInToAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      releaseFunds(args: MethodArgs<'releaseFunds(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.releaseFunds(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      deleteEscrow(args: MethodArgs<'deleteEscrow()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.deleteEscrow(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as EscrowServiceComposer
  }
}
export type EscrowServiceComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the setConditionMet()bool ABI method.
   *
   * Sets the condition to true, allowing funds release, and sends a message to the worker
This can be called by the boss upon confirmation that work is done or the asset has been delivered.


The address of the worker to confirm identity and send a message
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setConditionMet(args: MethodArgs<'setConditionMet()bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): EscrowServiceComposer<[...TReturns, MethodReturn<'setConditionMet()bool'>]>

  /**
   * Calls the optInToAsset(pay)void ABI method.
   *
   * Opt the contract address into the asset being held in escrow.
This allows the contract to hold the asset securely.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInToAsset(args: MethodArgs<'optInToAsset(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): EscrowServiceComposer<[...TReturns, MethodReturn<'optInToAsset(pay)void'>]>

  /**
   * Calls the releaseFunds(pay)void ABI method.
   *
   * Transfer funds from escrow to worker if the condition is met
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  releaseFunds(args: MethodArgs<'releaseFunds(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): EscrowServiceComposer<[...TReturns, MethodReturn<'releaseFunds(pay)void'>]>

  /**
   * Calls the deleteEscrow()void ABI method.
   *
   * Method to cancel the escrow and delete the application
Returns any remaining funds or assets to the boss
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteEscrow(args: MethodArgs<'deleteEscrow()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): EscrowServiceComposer<[...TReturns, MethodReturn<'deleteEscrow()void'>]>

  /**
   * Makes a clear_state call to an existing instance of the EscrowService smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): EscrowServiceComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): EscrowServiceComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<EscrowServiceComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<EscrowServiceComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type EscrowServiceComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type EscrowServiceComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
