#pragma version 10
intcblock 1 0 4 32
bytecblock 0x61737365744964 0x636f6e646974696f6e4d6574 0x776f726b6572 0x7061796d656e74416d6f756e74 0x7175616e74697479 0x00

// This TEAL was generated by TEALScript v0.105.3
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(uint64,uint64,uint64,address)void
*abi_route_createApplication:
	// worker: address
	txna ApplicationArgs 4
	dup
	len
	intc 3 // 32
	==

	// argument 0 (worker) for createApplication must be a address
	assert

	// paymentAmount: uint64
	txna ApplicationArgs 3
	btoi

	// quantity: uint64
	txna ApplicationArgs 2
	btoi

	// assetId: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64,uint64,uint64,address)void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(assetId: AssetID, quantity: uint64, paymentAmount: uint64, worker: Address): void
//
// Initialize the escrow contract
//
// @param assetId The asset to be held in escrow
// @param quantity The quantity of the asset to transfer
// @param paymentAmount The amount the boss has to pay
// @param worker The worker who will receive the asset if the condition is met
createApplication:
	proto 4 0

	// contracts\DecentralizedEscrow.algo.ts:28
	// this.assetId.value = assetId
	bytec 0 //  "assetId"
	frame_dig -1 // assetId: AssetID
	app_global_put

	// contracts\DecentralizedEscrow.algo.ts:29
	// this.quantity.value = quantity
	bytec 4 //  "quantity"
	frame_dig -2 // quantity: uint64
	app_global_put

	// contracts\DecentralizedEscrow.algo.ts:30
	// this.paymentAmount.value = paymentAmount
	bytec 3 //  "paymentAmount"
	frame_dig -3 // paymentAmount: uint64
	app_global_put

	// contracts\DecentralizedEscrow.algo.ts:31
	// this.worker.value = worker
	bytec 2 //  "worker"
	frame_dig -4 // worker: Address
	app_global_put

	// contracts\DecentralizedEscrow.algo.ts:32
	// this.conditionMet.value = false
	bytec 1 //  "conditionMet"
	intc 1 // 0
	bytec 5 // 0x00
	intc 1 // 0
	uncover 2
	setbit
	app_global_put
	retsub

// setConditionMet(address)void
*abi_route_setConditionMet:
	// workerAddress: address
	txna ApplicationArgs 1
	dup
	len
	intc 3 // 32
	==

	// argument 0 (workerAddress) for setConditionMet must be a address
	assert

	// execute setConditionMet(address)void
	callsub setConditionMet
	intc 0 // 1
	return

// setConditionMet(workerAddress: Address): void
//
// Sets the condition to true, allowing funds release, and sends a message to the worker
// This can be called by the boss upon confirmation that work is done or the asset has been delivered.
//
// @param workerAddress The address of the worker to confirm identity and send a message
setConditionMet:
	proto 1 0

	// contracts\DecentralizedEscrow.algo.ts:42
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts\DecentralizedEscrow.algo.ts:43
	// assert(workerAddress === this.worker.value)
	frame_dig -1 // workerAddress: Address
	bytec 2 //  "worker"
	app_global_get
	==
	assert

	// contracts\DecentralizedEscrow.algo.ts:46
	// this.conditionMet.value = true
	bytec 1 //  "conditionMet"
	intc 0 // 1
	bytec 5 // 0x00
	intc 1 // 0
	uncover 2
	setbit
	app_global_put
	retsub

// optInToAsset(pay)void
*abi_route_optInToAsset:
	// mbrTxn: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (mbrTxn) for optInToAsset must be a pay transaction
	assert

	// execute optInToAsset(pay)void
	callsub optInToAsset
	intc 0 // 1
	return

// optInToAsset(mbrTxn: PayTxn): void
//
// Opt the contract address into the asset being held in escrow.
// This allows the contract to hold the asset securely.
//
// @param mbrTxn The payment transaction that covers the Minimum Balance Requirement (MBR) for opting into the asset.
optInToAsset:
	proto 1 0

	// contracts\DecentralizedEscrow.algo.ts:57
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts\DecentralizedEscrow.algo.ts:60
	// assert(!this.app.address.isOptedInToAsset(this.assetId.value))
	global CurrentApplicationAddress
	bytec 0 //  "assetId"
	app_global_get
	asset_holding_get AssetBalance
	swap
	pop
	!
	assert

	// contracts\DecentralizedEscrow.algo.ts:63
	// verifyPayTxn(mbrTxn, {
	//       receiver: this.app.address,
	//       amount: globals.minBalance + globals.assetOptInMinBalance, // Ensure the correct amount for MBR
	//     })
	// verify receiver
	frame_dig -1 // mbrTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mbrTxn","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // mbrTxn: PayTxn
	gtxns Amount
	global MinBalance
	global AssetOptInMinBalance
	+
	==

	// transaction verification failed: {"txn":"mbrTxn","field":"amount","expected":"globals.minBalance + globals.assetOptInMinBalance"}
	assert

	// contracts\DecentralizedEscrow.algo.ts:69
	// sendAssetTransfer({
	//       xferAsset: this.assetId.value,
	//       assetAmount: 0, // Opt-in transaction (no actual transfer of asset units)
	//       assetReceiver: this.app.address,
	//     })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts\DecentralizedEscrow.algo.ts:70
	// xferAsset: this.assetId.value
	bytec 0 //  "assetId"
	app_global_get
	itxn_field XferAsset

	// contracts\DecentralizedEscrow.algo.ts:71
	// assetAmount: 0
	intc 1 // 0
	itxn_field AssetAmount

	// contracts\DecentralizedEscrow.algo.ts:72
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// releaseFunds(pay)void
*abi_route_releaseFunds:
	// workerPaymentTxn: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (workerPaymentTxn) for releaseFunds must be a pay transaction
	assert

	// execute releaseFunds(pay)void
	callsub releaseFunds
	intc 0 // 1
	return

// releaseFunds(workerPaymentTxn: PayTxn): void
//
// Transfer funds from escrow to worker if the condition is met
//
// @param workerPaymentTxn The payment transaction from the boss to the contract
releaseFunds:
	proto 1 0

	// contracts\DecentralizedEscrow.algo.ts:82
	// assert(this.conditionMet.value)
	bytec 1 //  "conditionMet"
	app_global_get
	intc 1 // 0
	getbit
	assert

	// contracts\DecentralizedEscrow.algo.ts:84
	// verifyPayTxn(workerPaymentTxn, {
	//       receiver: this.app.address,
	//       amount: this.paymentAmount.value,
	//     })
	// verify receiver
	frame_dig -1 // workerPaymentTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"workerPaymentTxn","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // workerPaymentTxn: PayTxn
	gtxns Amount
	bytec 3 //  "paymentAmount"
	app_global_get
	==

	// transaction verification failed: {"txn":"workerPaymentTxn","field":"amount","expected":"this.paymentAmount.value"}
	assert

	// contracts\DecentralizedEscrow.algo.ts:89
	// sendAssetTransfer({
	//       xferAsset: this.assetId.value,
	//       assetAmount: this.quantity.value,
	//       assetReceiver: this.worker.value,
	//     })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts\DecentralizedEscrow.algo.ts:90
	// xferAsset: this.assetId.value
	bytec 0 //  "assetId"
	app_global_get
	itxn_field XferAsset

	// contracts\DecentralizedEscrow.algo.ts:91
	// assetAmount: this.quantity.value
	bytec 4 //  "quantity"
	app_global_get
	itxn_field AssetAmount

	// contracts\DecentralizedEscrow.algo.ts:92
	// assetReceiver: this.worker.value
	bytec 2 //  "worker"
	app_global_get
	itxn_field AssetReceiver

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\DecentralizedEscrow.algo.ts:95
	// sendPayment({
	//       receiver: this.app.creator,
	//       amount: this.app.address.balance,
	//       closeRemainderTo: this.app.creator, // Return remaining balance to the boss
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts\DecentralizedEscrow.algo.ts:96
	// receiver: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field Receiver

	// contracts\DecentralizedEscrow.algo.ts:97
	// amount: this.app.address.balance
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	itxn_field Amount

	// contracts\DecentralizedEscrow.algo.ts:98
	// closeRemainderTo: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field CloseRemainderTo

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// deleteEscrow()void
*abi_route_deleteEscrow:
	// execute deleteEscrow()void
	callsub deleteEscrow
	intc 0 // 1
	return

// deleteEscrow(): void
//
// Method to cancel the escrow and delete the application
// Returns any remaining funds or assets to the boss
deleteEscrow:
	proto 0 0

	// contracts\DecentralizedEscrow.algo.ts:107
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts\DecentralizedEscrow.algo.ts:109
	// sendAssetTransfer({
	//       xferAsset: this.assetId.value,
	//       assetReceiver: this.app.creator,
	//       assetAmount: this.app.address.assetBalance(this.assetId.value),
	//       assetCloseTo: this.app.creator,
	//     })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts\DecentralizedEscrow.algo.ts:110
	// xferAsset: this.assetId.value
	bytec 0 //  "assetId"
	app_global_get
	itxn_field XferAsset

	// contracts\DecentralizedEscrow.algo.ts:111
	// assetReceiver: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field AssetReceiver

	// contracts\DecentralizedEscrow.algo.ts:112
	// assetAmount: this.app.address.assetBalance(this.assetId.value)
	global CurrentApplicationAddress
	bytec 0 //  "assetId"
	app_global_get
	asset_holding_get AssetBalance
	pop
	itxn_field AssetAmount

	// contracts\DecentralizedEscrow.algo.ts:113
	// assetCloseTo: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field AssetCloseTo

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\DecentralizedEscrow.algo.ts:116
	// sendPayment({
	//       receiver: this.app.creator,
	//       amount: this.app.address.balance,
	//       closeRemainderTo: this.app.creator,
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts\DecentralizedEscrow.algo.ts:117
	// receiver: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field Receiver

	// contracts\DecentralizedEscrow.algo.ts:118
	// amount: this.app.address.balance
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	itxn_field Amount

	// contracts\DecentralizedEscrow.algo.ts:119
	// closeRemainderTo: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field CloseRemainderTo

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

*create_NoOp:
	pushbytes 0x68011a49 // method "createApplication(uint64,uint64,uint64,address)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xc5018d4a // method "setConditionMet(address)void"
	pushbytes 0x37e84677 // method "optInToAsset(pay)void"
	pushbytes 0xaf655aae // method "releaseFunds(pay)void"
	pushbytes 0xe7ce4e22 // method "deleteEscrow()void"
	txna ApplicationArgs 0
	match *abi_route_setConditionMet *abi_route_optInToAsset *abi_route_releaseFunds *abi_route_deleteEscrow

	// this contract does not implement the given ABI method for call NoOp
	err