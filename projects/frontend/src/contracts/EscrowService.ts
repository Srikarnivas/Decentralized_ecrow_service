/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"EscrowService","desc":"","structs":{},"methods":[{"name":"createApplication","desc":"Initialize the escrow contract","args":[{"name":"worker","type":"address","desc":"The worker who will receive the asset if the condition is met"},{"name":"adminAddress","type":"address","desc":"The address of the admin"}],"returns":{"type":"void"},"events":[],"actions":{"create":["NoOp"],"call":[]}},{"name":"setConditionMet","desc":"Sets the condition to true, allowing funds release, and sends a message to the worker\nThis can be called by the boss upon confirmation that work is done or the asset has been delivered.\n\n\nThe address of the worker to confirm identity and send a message","args":[],"returns":{"type":"bool"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"addFundsToEscrow","args":[{"name":"ebaTxn","type":"pay","desc":"The paymentAmount transaction that adds the paymentamount to the escrow"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"releaseFunds","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"deleteEscrow","desc":"Method to cancel the escrow and delete the application\nReturns any remaining funds or assets to the boss","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}}],"state":{"schema":{"global":{"ints":1,"bytes":3},"local":{"ints":0,"bytes":0}},"keys":{"global":{"paymentAmount":{"key":"cGF5bWVudEFtb3VudA==","keyType":"AVMString","valueType":"AVMUint64"},"worker":{"key":"d29ya2Vy","keyType":"AVMString","valueType":"AVMBytes"},"conditionMet":{"key":"Y29uZGl0aW9uTWV0","keyType":"AVMString","valueType":"AVMBytes"},"admin":{"key":"YWRtaW4=","keyType":"AVMString","valueType":"AVMBytes"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"bareActions":{"create":[],"call":[]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the EscrowService contract
 */
export type EscrowServiceArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(address,address)void': {
      /**
       * The worker who will receive the asset if the condition is met
       */
      worker: string
      /**
       * The address of the admin
       */
      adminAddress: string
    }
    'setConditionMet()bool': Record<string, never>
    'addFundsToEscrow(pay)void': {
      /**
       * The paymentAmount transaction that adds the paymentamount to the escrow
       */
      ebaTxn: AppMethodCallTransactionArgument
    }
    'releaseFunds()void': Record<string, never>
    'deleteEscrow()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(address,address)void': [worker: string, adminAddress: string]
    'setConditionMet()bool': []
    'addFundsToEscrow(pay)void': [ebaTxn: AppMethodCallTransactionArgument]
    'releaseFunds()void': []
    'deleteEscrow()void': []
  }
}

/**
 * The return type for each method
 */
export type EscrowServiceReturns = {
  'createApplication(address,address)void': void
  'setConditionMet()bool': boolean
  'addFundsToEscrow(pay)void': void
  'releaseFunds()void': void
  'deleteEscrow()void': void
}

/**
 * Defines the types of available calls and state of the EscrowService smart contract.
 */
export type EscrowServiceTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(address,address)void' | 'createApplication', {
      argsObj: EscrowServiceArgs['obj']['createApplication(address,address)void']
      argsTuple: EscrowServiceArgs['tuple']['createApplication(address,address)void']
      returns: EscrowServiceReturns['createApplication(address,address)void']
    }>
    & Record<'setConditionMet()bool' | 'setConditionMet', {
      argsObj: EscrowServiceArgs['obj']['setConditionMet()bool']
      argsTuple: EscrowServiceArgs['tuple']['setConditionMet()bool']
      returns: EscrowServiceReturns['setConditionMet()bool']
    }>
    & Record<'addFundsToEscrow(pay)void' | 'addFundsToEscrow', {
      argsObj: EscrowServiceArgs['obj']['addFundsToEscrow(pay)void']
      argsTuple: EscrowServiceArgs['tuple']['addFundsToEscrow(pay)void']
      returns: EscrowServiceReturns['addFundsToEscrow(pay)void']
    }>
    & Record<'releaseFunds()void' | 'releaseFunds', {
      argsObj: EscrowServiceArgs['obj']['releaseFunds()void']
      argsTuple: EscrowServiceArgs['tuple']['releaseFunds()void']
      returns: EscrowServiceReturns['releaseFunds()void']
    }>
    & Record<'deleteEscrow()void' | 'deleteEscrow', {
      argsObj: EscrowServiceArgs['obj']['deleteEscrow()void']
      argsTuple: EscrowServiceArgs['tuple']['deleteEscrow()void']
      returns: EscrowServiceReturns['deleteEscrow()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        paymentAmount: bigint
        worker: BinaryState
        conditionMet: BinaryState
        admin: BinaryState
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type EscrowServiceSignatures = keyof EscrowServiceTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type EscrowServiceNonVoidMethodSignatures = keyof EscrowServiceTypes['methods'] extends infer T ? T extends keyof EscrowServiceTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the EscrowService smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends EscrowServiceSignatures> = EscrowServiceTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the EscrowService smart contract to the method's return type
 */
export type MethodReturn<TSignature extends EscrowServiceSignatures> = EscrowServiceTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = EscrowServiceTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type EscrowServiceCreateCallParams =
  | Expand<CallParams<EscrowServiceArgs['obj']['createApplication(address,address)void'] | EscrowServiceArgs['tuple']['createApplication(address,address)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<EscrowServiceArgs['obj']['createApplication(address,address)void'] | EscrowServiceArgs['tuple']['createApplication(address,address)void']> & {method: 'createApplication(address,address)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type EscrowServiceDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: EscrowServiceCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the EscrowService smart contract
 */
export abstract class EscrowServiceParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends EscrowServiceCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(address,address)void':
            return EscrowServiceParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the EscrowService smart contract using the createApplication(address,address)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<EscrowServiceArgs['obj']['createApplication(address,address)void'] | EscrowServiceArgs['tuple']['createApplication(address,address)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(address,address)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.worker, params.args.adminAddress],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the setConditionMet()bool ABI method
   *
  * Sets the condition to true, allowing funds release, and sends a message to the worker
  This can be called by the boss upon confirmation that work is done or the asset has been delivered.
  
  
  The address of the worker to confirm identity and send a message

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setConditionMet(params: CallParams<EscrowServiceArgs['obj']['setConditionMet()bool'] | EscrowServiceArgs['tuple']['setConditionMet()bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setConditionMet()bool' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the addFundsToEscrow(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addFundsToEscrow(params: CallParams<EscrowServiceArgs['obj']['addFundsToEscrow(pay)void'] | EscrowServiceArgs['tuple']['addFundsToEscrow(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addFundsToEscrow(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.ebaTxn],
    }
  }
  /**
   * Constructs a no op call for the releaseFunds()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static releaseFunds(params: CallParams<EscrowServiceArgs['obj']['releaseFunds()void'] | EscrowServiceArgs['tuple']['releaseFunds()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'releaseFunds()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the deleteEscrow()void ABI method
   *
  * Method to cancel the escrow and delete the application
  Returns any remaining funds or assets to the boss

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static deleteEscrow(params: CallParams<EscrowServiceArgs['obj']['deleteEscrow()void'] | EscrowServiceArgs['tuple']['deleteEscrow()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'deleteEscrow()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the EscrowService smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class EscrowServiceFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: AppFactory

  /**
   * Creates a new instance of `EscrowServiceFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new EscrowServiceClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new EscrowServiceClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the EscrowService smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: EscrowServiceDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? EscrowServiceParamsFactory.create._resolveByMethod(params.createParams) : params.createParams,
    })
    return { result: result.result, appClient: new EscrowServiceClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the EscrowService smart contract using the createApplication(address,address)void ABI method.
       *
       * Initialize the escrow contract
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<EscrowServiceArgs['obj']['createApplication(address,address)void'] | EscrowServiceArgs['tuple']['createApplication(address,address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(EscrowServiceParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the EscrowService smart contract using the createApplication(address,address)void ABI method.
       *
       * Initialize the escrow contract
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<EscrowServiceArgs['obj']['createApplication(address,address)void'] | EscrowServiceArgs['tuple']['createApplication(address,address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(EscrowServiceParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the EscrowService smart contract using an ABI method call using the createApplication(address,address)void ABI method.
       *
       * Initialize the escrow contract
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<EscrowServiceArgs['obj']['createApplication(address,address)void'] | EscrowServiceArgs['tuple']['createApplication(address,address)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(EscrowServiceParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as undefined | EscrowServiceReturns['createApplication(address,address)void'] }, appClient: new EscrowServiceClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the EscrowService smart contract
 */
export class EscrowServiceClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: AppClient

  /**
   * Creates a new instance of `EscrowServiceClient`
   *
   * @param appClient An `AppClient` instance which has been created with the EscrowService app spec
   */
  constructor(appClient: AppClient)
  /**
   * Creates a new instance of `EscrowServiceClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof AppClient ? appClientOrParams : new AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends EscrowServiceNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `EscrowServiceClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<EscrowServiceClient> {
    return new EscrowServiceClient(await AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `EscrowServiceClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<EscrowServiceClient> {
    return new EscrowServiceClient(await AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the EscrowService smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the EscrowService smart contract using the `setConditionMet()bool` ABI method.
     *
    * Sets the condition to true, allowing funds release, and sends a message to the worker
    This can be called by the boss upon confirmation that work is done or the asset has been delivered.
    
    
    The address of the worker to confirm identity and send a message

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setConditionMet: (params: CallParams<EscrowServiceArgs['obj']['setConditionMet()bool'] | EscrowServiceArgs['tuple']['setConditionMet()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(EscrowServiceParamsFactory.setConditionMet(params))
    },

    /**
     * Makes a call to the EscrowService smart contract using the `addFundsToEscrow(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addFundsToEscrow: (params: CallParams<EscrowServiceArgs['obj']['addFundsToEscrow(pay)void'] | EscrowServiceArgs['tuple']['addFundsToEscrow(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EscrowServiceParamsFactory.addFundsToEscrow(params))
    },

    /**
     * Makes a call to the EscrowService smart contract using the `releaseFunds()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    releaseFunds: (params: CallParams<EscrowServiceArgs['obj']['releaseFunds()void'] | EscrowServiceArgs['tuple']['releaseFunds()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(EscrowServiceParamsFactory.releaseFunds(params))
    },

    /**
     * Makes a call to the EscrowService smart contract using the `deleteEscrow()void` ABI method.
     *
    * Method to cancel the escrow and delete the application
    Returns any remaining funds or assets to the boss

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    deleteEscrow: (params: CallParams<EscrowServiceArgs['obj']['deleteEscrow()void'] | EscrowServiceArgs['tuple']['deleteEscrow()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(EscrowServiceParamsFactory.deleteEscrow(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the EscrowService smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the EscrowService smart contract using the `setConditionMet()bool` ABI method.
     *
    * Sets the condition to true, allowing funds release, and sends a message to the worker
    This can be called by the boss upon confirmation that work is done or the asset has been delivered.
    
    
    The address of the worker to confirm identity and send a message

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setConditionMet: (params: CallParams<EscrowServiceArgs['obj']['setConditionMet()bool'] | EscrowServiceArgs['tuple']['setConditionMet()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(EscrowServiceParamsFactory.setConditionMet(params))
    },

    /**
     * Makes a call to the EscrowService smart contract using the `addFundsToEscrow(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addFundsToEscrow: (params: CallParams<EscrowServiceArgs['obj']['addFundsToEscrow(pay)void'] | EscrowServiceArgs['tuple']['addFundsToEscrow(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EscrowServiceParamsFactory.addFundsToEscrow(params))
    },

    /**
     * Makes a call to the EscrowService smart contract using the `releaseFunds()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    releaseFunds: (params: CallParams<EscrowServiceArgs['obj']['releaseFunds()void'] | EscrowServiceArgs['tuple']['releaseFunds()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(EscrowServiceParamsFactory.releaseFunds(params))
    },

    /**
     * Makes a call to the EscrowService smart contract using the `deleteEscrow()void` ABI method.
     *
    * Method to cancel the escrow and delete the application
    Returns any remaining funds or assets to the boss

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    deleteEscrow: (params: CallParams<EscrowServiceArgs['obj']['deleteEscrow()void'] | EscrowServiceArgs['tuple']['deleteEscrow()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(EscrowServiceParamsFactory.deleteEscrow(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the EscrowService smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the EscrowService smart contract using the `setConditionMet()bool` ABI method.
     *
    * Sets the condition to true, allowing funds release, and sends a message to the worker
    This can be called by the boss upon confirmation that work is done or the asset has been delivered.
    
    
    The address of the worker to confirm identity and send a message

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setConditionMet: async (params: CallParams<EscrowServiceArgs['obj']['setConditionMet()bool'] | EscrowServiceArgs['tuple']['setConditionMet()bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(EscrowServiceParamsFactory.setConditionMet(params))
      return {...result, return: result.return as undefined | EscrowServiceReturns['setConditionMet()bool']}
    },

    /**
     * Makes a call to the EscrowService smart contract using the `addFundsToEscrow(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addFundsToEscrow: async (params: CallParams<EscrowServiceArgs['obj']['addFundsToEscrow(pay)void'] | EscrowServiceArgs['tuple']['addFundsToEscrow(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EscrowServiceParamsFactory.addFundsToEscrow(params))
      return {...result, return: result.return as undefined | EscrowServiceReturns['addFundsToEscrow(pay)void']}
    },

    /**
     * Makes a call to the EscrowService smart contract using the `releaseFunds()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    releaseFunds: async (params: CallParams<EscrowServiceArgs['obj']['releaseFunds()void'] | EscrowServiceArgs['tuple']['releaseFunds()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(EscrowServiceParamsFactory.releaseFunds(params))
      return {...result, return: result.return as undefined | EscrowServiceReturns['releaseFunds()void']}
    },

    /**
     * Makes a call to the EscrowService smart contract using the `deleteEscrow()void` ABI method.
     *
    * Method to cancel the escrow and delete the application
    Returns any remaining funds or assets to the boss

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    deleteEscrow: async (params: CallParams<EscrowServiceArgs['obj']['deleteEscrow()void'] | EscrowServiceArgs['tuple']['deleteEscrow()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(EscrowServiceParamsFactory.deleteEscrow(params))
      return {...result, return: result.return as undefined | EscrowServiceReturns['deleteEscrow()void']}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new EscrowServiceClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current EscrowService app
   */
  state = {
    /**
     * Methods to access global state for the current EscrowService app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          paymentAmount: result.paymentAmount,
          worker: new BinaryStateValue(result.worker),
          conditionMet: new BinaryStateValue(result.conditionMet),
          admin: new BinaryStateValue(result.admin),
        }
      },
      /**
       * Get the current value of the paymentAmount key in global state
       */
      paymentAmount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("paymentAmount")) as bigint | undefined },
      /**
       * Get the current value of the worker key in global state
       */
      worker: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("worker")) as Uint8Array | undefined) },
      /**
       * Get the current value of the conditionMet key in global state
       */
      conditionMet: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("conditionMet")) as Uint8Array | undefined) },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("admin")) as Uint8Array | undefined) },
    },
  }

  public newGroup(): EscrowServiceComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a setConditionMet()bool method call against the EscrowService contract
       */
      setConditionMet(params: CallParams<EscrowServiceArgs['obj']['setConditionMet()bool'] | EscrowServiceArgs['tuple']['setConditionMet()bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setConditionMet(params)))
        resultMappers.push((v) => client.decodeReturnValue('setConditionMet()bool', v))
        return this
      },
      /**
       * Add a addFundsToEscrow(pay)void method call against the EscrowService contract
       */
      addFundsToEscrow(params: CallParams<EscrowServiceArgs['obj']['addFundsToEscrow(pay)void'] | EscrowServiceArgs['tuple']['addFundsToEscrow(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addFundsToEscrow(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a releaseFunds()void method call against the EscrowService contract
       */
      releaseFunds(params: CallParams<EscrowServiceArgs['obj']['releaseFunds()void'] | EscrowServiceArgs['tuple']['releaseFunds()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.releaseFunds(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a deleteEscrow()void method call against the EscrowService contract
       */
      deleteEscrow(params: CallParams<EscrowServiceArgs['obj']['deleteEscrow()void'] | EscrowServiceArgs['tuple']['deleteEscrow()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.deleteEscrow(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the EscrowService contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await composer.simulate(options)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as EscrowServiceComposer
  }
}
export type EscrowServiceComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the setConditionMet()bool ABI method.
   *
  * Sets the condition to true, allowing funds release, and sends a message to the worker
  This can be called by the boss upon confirmation that work is done or the asset has been delivered.
  
  
  The address of the worker to confirm identity and send a message

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setConditionMet(params?: CallParams<EscrowServiceArgs['obj']['setConditionMet()bool'] | EscrowServiceArgs['tuple']['setConditionMet()bool']>): EscrowServiceComposer<[...TReturns, EscrowServiceReturns['setConditionMet()bool'] | undefined]>

  /**
   * Calls the addFundsToEscrow(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addFundsToEscrow(params?: CallParams<EscrowServiceArgs['obj']['addFundsToEscrow(pay)void'] | EscrowServiceArgs['tuple']['addFundsToEscrow(pay)void']>): EscrowServiceComposer<[...TReturns, EscrowServiceReturns['addFundsToEscrow(pay)void'] | undefined]>

  /**
   * Calls the releaseFunds()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  releaseFunds(params?: CallParams<EscrowServiceArgs['obj']['releaseFunds()void'] | EscrowServiceArgs['tuple']['releaseFunds()void']>): EscrowServiceComposer<[...TReturns, EscrowServiceReturns['releaseFunds()void'] | undefined]>

  /**
   * Calls the deleteEscrow()void ABI method.
   *
  * Method to cancel the escrow and delete the application
  Returns any remaining funds or assets to the boss

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteEscrow(params?: CallParams<EscrowServiceArgs['obj']['deleteEscrow()void'] | EscrowServiceArgs['tuple']['deleteEscrow()void']>): EscrowServiceComposer<[...TReturns, EscrowServiceReturns['deleteEscrow()void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the EscrowService smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): EscrowServiceComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): EscrowServiceComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<EscrowServiceComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<EscrowServiceComposerResults<TReturns>>
}
export type EscrowServiceComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

